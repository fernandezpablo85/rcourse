data.
data.frame
data.frame("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/present.txt"")
present = data.frame("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/present.txt"")
present = data.frame("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/present.txt")
present
present$boys
present
present = read.table("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/present.txt")
present
dim(present)
names(present)
present$yerar
present$year
plot(present$year, present$boys)
plot(present$year, present$boys, type ="l")
qt(0.025, df = 21)
pt(2.30, df = 21)
1- pt(2.30, df = 21)
2* pt(2.30, df = 21, lower.tail = FALSE)
pt
pnorm
pt(2.24, df = 21)
pt(2.24, df = 21, lower.tail = FALSE)
2* pt(2.24, df = 21, lower.tail = FALSE)
q()
demo()
[11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16]
install
read
read.csv
load("~/Downloads/mock_class_data (1) - HRP259ClassSurvey_DATA_LABELS_2.csv")
load("~/Downloads/data.csv")
read.csv("~/Downloads/data.csv")
data <- read.csv(file.choose())
data
data['varsity']
data["varsity"]
data[0]
data[1]
data[2]
data.varisty
data.varsity
names(data)
data["Varsity"]
data[c("Varsity", "Name")]
data[c("Varsity", "Milk")]
data["Varsity"]
data["Varsity"] <- data["Varsity"] + 1
data["Varsity"]
data["Varsity"] <- data["Varsity"] - 1
data["Varsity"] <- data["Varsity"] != 0
data["Varsity"]
hist(data["Coffee"])
names(data)
hist(data["coffee"])
data["coffee"]
example(hist)
example(hist)
help(hist)
hist(x = data["coffee"])
cof <- data["coffee"]
View(cof)
View(cof)
View(cof)
BMI<-rnorm(n=1000, m=24.2, sd=2.2)
hist(BMI)
cof
cof[0]
cof[1]
cof[1][1]
cof[1][1]
BMI
cof <- c(data["ID"], data["coffee"])
hist(cof)
dim(cof)
dim(data)
dim(data) <- c(1,2)
c(1,2,3,)
c(1,2,3,4)
sort(data)
sort(x = data)
sort(x = data["Varsity"])
data.Varsity
data["Varsity"]
install.packages("swirl")
swirl()
library("swirl")
install.packages("swirl")
library("swirl")
version
q()
sd(c(5,8,12))
which.min(c(4,1,6))
:q
exit
exit()
quit()
getwd()
setwd('/Users/pablo/projects/playground/rcourse/misc')
words = read.csv('words.proc.csv')
str(words)
words = read.csv('words.proc.csv', stringsAsFactors=FALSE)
str(words)
library(rpart)
library(rpart.plot)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc, datax=words)
library(caTools)
spl = sample.split(words$present, SplitRatio = 0.7)
train = subset(words, spl==TRUE)
test = subset(words, spl==FALSE)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc, data=train, cp=0.001)
prp(tree)
pred = predict(tree, newdata = test)
pred
pred[,2]
pred
table(test$present, pred > 0.63)
table(test$present, pred > 0.60)
(2119+1974)/nrow(test)
table(test$present, pred > 0.5)
(1532+2732)/nrow(test)
test$seemspresent = pred > 0.5
test$seemspresent
test$seemspresent = ifelse(test$seemspresent == TRUE, 1,0)
failed = subset(test, present != seemspresent)
failed
failed[1:1--]
failed[1:10]
failed[1:100]
failed[1:100,]
failed[1:10,]
q()
library(stringr)
words$vowels = str_count(words$word, pattern = "[aeiouy]")
words$consonants = str_count(words$word, pattern = "[^aeiouy]")
words$vtc = words$vowels / words$consonants
train = subset(words, spl==TRUE)
test = subset(words, spl==FALSE)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc, data=train, cp=0.001)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.5)
(1449+2801)/nrow(test)
prp
prp(tree)
table(test$present, pred > 0.5)
table(test$present, pred > 0.4)
(1060+3184) / nrow(test)
table(test$present, pred > 0.3)
(782+3304)/nrow(test)
table(test$present, pred > 0.6)
(2091+2004)/nrow(tes)
(2091+2004)/nrow(test)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc, data=train, cp=1e-4)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.3)
table(test$present, pred > 0.5)
prp(tree)
(1320+2943)/nrow(test)
1e-4
1e-04
1e-03
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc, data=train, cp=1e-3)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.5)
(1449+2801)/nrow(test)
prp(tree)
words$vtl = words$vowels / words$len
words$ctl = words$consonants / words$len
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, cp=1e-3)
train = subset(words, spl==TRUE)
test = subset(words, spl==FALSE)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, cp=1e-3)
prp(Tree)
prp(tree)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.5)
(1449+2801)/nrow(test)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, cp=1e-4)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.5)
(1320+2945)/nrow(test)
test$seemspresent = ifelse(pred >0.5, 1,0)
failed = subset(test, present != seemspresent)
failed[1:10, ]
failed[1:100, ]
mean(failed$seemspresent)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, cp=1e-4)
prp(tree)
table(test$present, pred > 0.5)
table(test$present, pred > 0.6)
(2101+2002)/nrow(test)
table(test$present, pred > 0.7)
3381/nrow(test)
tree = rpart(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, cp=1e-3)
prp(tree)
failed[1:10,]
failed[1:100,]
tree = rpart(present ~ len+nonletters+vtc+vtl+ctl, data=train, cp=1e-3)
prp(tree)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.5)
(1658+2538)/nrow(test)
tree = rpart(present ~ len+nonletters+vtc+vtl+ctl, data=train, cp=1e-4)
pred = predict(tree, newdata = test)
table(test$present, pred > 0.5)
(1304+2946)/nrow(test)
prp(tree)
summary(tree)
tree$terms
failed
failed[1:100,]
failed[1:100, c(1,2)]
failed[1:100, 1]
failed[1:100, c(1,2)]
failed[1:100, c(1,2,5)]
failed[1:100, c(1,2,6)]
failed[1:50, c(1,2,6)]
str(failed)
failed[1:50, c(1,2,10)]
library(randomForest)
forest = randomForest(present ~ len+nonletters+vtc+vtl+ctl, data=train)
train
forest = randomForest(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train)
forest = randomForest(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, nodesize = 25)
train$vtl
is.inf(train$vtl)
is.infinite(train$vtl)
is.infinite(train$vtl) == TRUE
subset(train, is.infinite(train$vtl))
subset(train, is.infinite(train$vtc))
subset(train, is.infinite(train$vtl))
subset(train, is.infinite(train$ctl))
subset(train, is.infinite(train$vtc))
train$vtc = ifelse(is.infinite(train$vtc), 1, train$vtc)
subset(train, is.infinite(train$vtc))
forest = randomForest(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, nodesize = 25)
forest = randomForest(present ~ len+vowels+consonants+nonletters+vtc+vtl+ctl, data=train, nodesize = 25, ntree=200)
pred = predict(forest, newdata = test)
pred = predict(forest, newdata = test)
failed
failed[1:10, ]
failed[1:20, ]
failed[20:40, ]
failed[100:140, ]
failed[80:100, ]
words
which.max(words)
which.max(words$len)
words$word[20651]
present
present = subset(words, present == 1)
present
which.max(present$len)
present$word[577]
present[577:,]
present[577,]
